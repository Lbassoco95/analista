#!/usr/bin/env python3
"""
Ejemplo de Retroalimentaci√≥n desde GPT Personalizado
Demuestra c√≥mo funciona la integraci√≥n de retroalimentaci√≥n con Function Calling
"""

import asyncio
import json
import logging
from datetime import datetime
import requests
from typing import Dict, Any

# Configurar logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class GPTFeedbackSimulator:
    """
    Simulador de GPT personalizado que env√≠a retroalimentaci√≥n
    """
    
    def __init__(self, api_base_url: str = "http://localhost:8000"):
        """Inicializar simulador"""
        self.api_base_url = api_base_url
        self.feedback_endpoint = f"{api_base_url}/feedback/guardar_feedback/"
        
        # Ejemplos de conversaciones de chat
        self.chat_examples = [
            {
                "user_message": "El producto Wallet + KYC en Colombia tuvo baja adopci√≥n porque el onboarding fue confuso.",
                "expected_feedback": {
                    "producto": "Wallet + KYC",
                    "mercado": "Colombia",
                    "observacion": "Baja adopci√≥n debido a onboarding confuso",
                    "categoria": "producto",
                    "impacto": "alto",
                    "accion_recomendada": "Redise√±ar proceso de onboarding para mayor claridad"
                }
            },
            {
                "user_message": "Los precios de KYC en M√©xico son muy altos comparados con la competencia.",
                "expected_feedback": {
                    "producto": "KYC",
                    "mercado": "M√©xico",
                    "observacion": "Precios muy altos comparados con la competencia",
                    "categoria": "precio",
                    "impacto": "alto",
                    "accion_recomendada": "Revisar estrategia de pricing para ser m√°s competitivo"
                }
            },
            {
                "user_message": "El onboarding remoto en Per√∫ funcion√≥ muy bien, los usuarios lo encontraron intuitivo.",
                "expected_feedback": {
                    "producto": "Onboarding Remoto",
                    "mercado": "Per√∫",
                    "observacion": "Onboarding funcion√≥ muy bien, usuarios lo encontraron intuitivo",
                    "categoria": "producto",
                    "impacto": "alto",
                    "accion_recomendada": "Mantener la simplicidad del dise√±o y replicar en otros mercados"
                }
            },
            {
                "user_message": "Necesitamos m√°s opciones de integraci√≥n para la firma digital en Chile.",
                "expected_feedback": {
                    "producto": "Firma Digital",
                    "mercado": "Chile",
                    "observacion": "Necesitamos m√°s opciones de integraci√≥n",
                    "categoria": "tecnico",
                    "impacto": "medio",
                    "accion_recomendada": "Desarrollar APIs adicionales y documentaci√≥n de integraci√≥n"
                }
            },
            {
                "user_message": "El mercado de wallets en Argentina est√° muy regulado, necesitamos ajustar nuestra estrategia.",
                "expected_feedback": {
                    "producto": "Wallet",
                    "mercado": "Argentina",
                    "observacion": "Mercado muy regulado, necesitamos ajustar estrategia",
                    "categoria": "regulacion",
                    "impacto": "alto",
                    "accion_recomendada": "Consultar con expertos legales y ajustar estrategia de compliance"
                }
            }
        ]
    
    async def simular_conversacion_gpt(self, example_index: int = 0):
        """
        Simula una conversaci√≥n de GPT que procesa retroalimentaci√≥n
        
        Args:
            example_index: √çndice del ejemplo a usar
        """
        if example_index >= len(self.chat_examples):
            logger.error("√çndice de ejemplo fuera de rango")
            return
        
        example = self.chat_examples[example_index]
        user_message = example["user_message"]
        expected_feedback = example["expected_feedback"]
        
        print(f"\nü§ñ SIMULACI√ìN DE CONVERSACI√ìN GPT")
        print("=" * 50)
        print(f"üë§ Usuario: {user_message}")
        
        # Simular procesamiento de GPT
        print(f"\nüß† GPT procesando mensaje...")
        
        # Extraer informaci√≥n del mensaje (simulado)
        extracted_info = self._extraer_info_mensaje(user_message)
        
        print(f"üìù Informaci√≥n extra√≠da:")
        print(f"   Producto: {extracted_info['producto']}")
        print(f"   Mercado: {extracted_info['mercado']}")
        print(f"   Observaci√≥n: {extracted_info['observacion']}")
        print(f"   Categor√≠a: {extracted_info['categoria']}")
        print(f"   Impacto: {extracted_info['impacto']}")
        
        # Simular llamada a funci√≥n
        print(f"\nüîó GPT llamando funci√≥n guardar_feedback...")
        
        # Enviar feedback a la API
        success = await self._enviar_feedback_api(extracted_info)
        
        if success:
            print(f"‚úÖ Feedback guardado exitosamente")
            print(f"üíæ Informaci√≥n almacenada en Supabase")
            
            # Simular respuesta de GPT
            print(f"\nü§ñ Respuesta de GPT:")
            print(f"   He guardado tu retroalimentaci√≥n sobre {extracted_info['producto']} en {extracted_info['mercado']}.")
            print(f"   Esta informaci√≥n ser√° utilizada para mejorar nuestras estrategias futuras.")
            print(f"   ¬øTe gustar√≠a que analice el feedback acumulado para este producto?")
        else:
            print(f"‚ùå Error guardando feedback")
    
    def _extraer_info_mensaje(self, mensaje: str) -> Dict[str, Any]:
        """
        Extrae informaci√≥n estructurada del mensaje del usuario
        (En producci√≥n, esto lo har√≠a GPT autom√°ticamente)
        """
        # Mapeo de productos
        productos = {
            'wallet': 'Wallet',
            'kyc': 'KYC',
            'onboarding': 'Onboarding Remoto',
            'firma digital': 'Firma Digital'
        }
        
        # Mapeo de pa√≠ses
        paises = ['mexico', 'colombia', 'peru', 'chile', 'argentina', 'brasil']
        
        # Mapeo de categor√≠as
        categorias = {
            'precio': ['precio', 'costos', 'tarifas', 'caro', 'barato'],
            'producto': ['onboarding', 'confuso', 'intuitivo', 'funcionalidad'],
            'mercado': ['mercado', 'competencia', 'adopci√≥n'],
            'regulacion': ['regulado', 'regulaciones', 'compliance'],
            'tecnico': ['integraci√≥n', 'api', 't√©cnico', 'desarrollo']
        }
        
        # Extraer informaci√≥n
        mensaje_lower = mensaje.lower()
        
        # Producto
        producto_extraido = "Producto Gen√©rico"
        for key, value in productos.items():
            if key in mensaje_lower:
                producto_extraido = value
                break
        
        # Pa√≠s
        pais_extraido = "Pa√≠s Gen√©rico"
        for pais in paises:
            if pais in mensaje_lower:
                pais_extraido = pais.title()
                break
        
        # Categor√≠a
        categoria_extraida = "general"
        for categoria, keywords in categorias.items():
            if any(keyword in mensaje_lower for keyword in keywords):
                categoria_extraida = categoria
                break
        
        # Impacto (simulado basado en palabras clave)
        impacto = "medio"
        if any(word in mensaje_lower for word in ['muy', 'alto', 'cr√≠tico', 'importante']):
            impacto = "alto"
        elif any(word in mensaje_lower for word in ['bajo', 'poco', 'menor']):
            impacto = "bajo"
        
        # Observaci√≥n (simplificada)
        observacion = mensaje[:100] + "..." if len(mensaje) > 100 else mensaje
        
        return {
            'producto': producto_extraido,
            'mercado': pais_extraido,
            'observacion': observacion,
            'categoria': categoria_extraida,
            'impacto': impacto,
            'accion_recomendada': f"Revisar {categoria_extraida} para {producto_extraido} en {pais_extraido}",
            'fuente': 'gpt_chat'
        }
    
    async def _enviar_feedback_api(self, feedback_data: Dict[str, Any]) -> bool:
        """
        Env√≠a feedback a la API
        
        Args:
            feedback_data: Datos del feedback
            
        Returns:
            True si se guard√≥ exitosamente
        """
        try:
            response = requests.post(
                self.feedback_endpoint,
                json=feedback_data,
                headers={'Content-Type': 'application/json'},
                timeout=10
            )
            
            if response.status_code == 200:
                result = response.json()
                logger.info(f"Feedback guardado: {result.get('id', 'N/A')}")
                return True
            else:
                logger.error(f"Error API: {response.status_code} - {response.text}")
                return False
                
        except Exception as e:
            logger.error(f"Error enviando feedback: {str(e)}")
            return False
    
    async def simular_multiples_conversaciones(self):
        """Simula m√∫ltiples conversaciones de GPT"""
        print("üöÄ SIMULACI√ìN DE M√öLTIPLES CONVERSACIONES GPT")
        print("=" * 60)
        
        for i, example in enumerate(self.chat_examples):
            print(f"\nüìù Conversaci√≥n {i+1}/{len(self.chat_examples)}")
            await self.simular_conversacion_gpt(i)
            
            # Pausa entre conversaciones
            if i < len(self.chat_examples) - 1:
                print("\n‚è≥ Esperando 2 segundos...")
                await asyncio.sleep(2)
    
    async def consultar_feedback_almacenado(self, producto: str = None, mercado: str = None):
        """
        Consulta feedback almacenado
        
        Args:
            producto: Filtrar por producto
            mercado: Filtrar por mercado
        """
        try:
            endpoint = f"{self.api_base_url}/feedback/obtener_feedback/"
            params = {}
            
            if producto:
                params['producto'] = producto
            if mercado:
                params['mercado'] = mercado
            
            response = requests.get(endpoint, params=params, timeout=10)
            
            if response.status_code == 200:
                feedbacks = response.json()
                print(f"\nüìä FEEDBACK ALMACENADO")
                print("=" * 40)
                print(f"Total encontrados: {len(feedbacks)}")
                
                for i, feedback in enumerate(feedbacks[:5], 1):  # Mostrar solo los primeros 5
                    print(f"\n{i}. {feedback.get('producto', 'N/A')} en {feedback.get('mercado', 'N/A')}")
                    print(f"   Observaci√≥n: {feedback.get('observacion', 'N/A')[:50]}...")
                    print(f"   Categor√≠a: {feedback.get('categoria', 'N/A')}")
                    print(f"   Impacto: {feedback.get('impacto', 'N/A')}")
                    print(f"   Fecha: {feedback.get('fecha', 'N/A')}")
                
                return feedbacks
            else:
                logger.error(f"Error consultando feedback: {response.status_code}")
                return []
                
        except Exception as e:
            logger.error(f"Error en consulta: {str(e)}")
            return []
    
    async def analizar_feedback_producto(self, producto: str, mercado: str):
        """
        Analiza feedback de un producto espec√≠fico
        
        Args:
            producto: Nombre del producto
            mercado: Pa√≠s o mercado
        """
        try:
            endpoint = f"{self.api_base_url}/feedback/analizar_feedback/{producto}/{mercado}"
            response = requests.get(endpoint, timeout=10)
            
            if response.status_code == 200:
                analisis = response.json()
                print(f"\nüìà AN√ÅLISIS DE FEEDBACK")
                print("=" * 40)
                print(f"Producto: {analisis.get('producto', 'N/A')}")
                print(f"Mercado: {analisis.get('mercado', 'N/A')}")
                print(f"Total feedbacks: {analisis.get('total_feedbacks', 0)}")
                
                # Categor√≠as m√°s comunes
                categorias = analisis.get('categorias_mas_comunes', [])
                if categorias:
                    print(f"\nüè∑Ô∏è Categor√≠as m√°s comunes:")
                    for categoria, count in categorias:
                        print(f"   {categoria}: {count} feedbacks")
                
                # Distribuci√≥n de impactos
                impactos = analisis.get('distribucion_impactos', {})
                if impactos:
                    print(f"\nüìä Distribuci√≥n de impactos:")
                    for impacto, count in impactos.items():
                        print(f"   {impacto}: {count} feedbacks")
                
                # Observaciones clave
                observaciones = analisis.get('observaciones_clave', [])
                if observaciones:
                    print(f"\nüí° Observaciones clave:")
                    for i, obs in enumerate(observaciones[:3], 1):
                        print(f"   {i}. {obs[:60]}...")
                
                return analisis
            else:
                logger.error(f"Error analizando feedback: {response.status_code}")
                return None
                
        except Exception as e:
            logger.error(f"Error en an√°lisis: {str(e)}")
            return None

async def main():
    """Funci√≥n principal"""
    print("üéØ SIMULADOR DE RETROALIMENTACI√ìN GPT")
    print("=" * 60)
    print("Este script simula c√≥mo GPT personalizado procesa retroalimentaci√≥n")
    print("y la env√≠a autom√°ticamente a la API para almacenamiento.")
    
    # Inicializar simulador
    simulador = GPTFeedbackSimulator()
    
    try:
        # 1. Simular m√∫ltiples conversaciones
        await simulador.simular_multiples_conversaciones()
        
        # 2. Consultar feedback almacenado
        print(f"\n" + "=" * 60)
        await simulador.consultar_feedback_almacenado()
        
        # 3. Analizar feedback espec√≠fico
        print(f"\n" + "=" * 60)
        await simulador.analizar_feedback_producto("Wallet + KYC", "Colombia")
        
        print(f"\n" + "=" * 60)
        print("‚úÖ SIMULACI√ìN COMPLETADA")
        print("\nüéØ Pr√≥ximos pasos:")
        print("1. Configurar GPT personalizado en https://chat.openai.com/gpts")
        print("2. Agregar las funciones definidas en gpt_function_definitions.json")
        print("3. Conectar con tu API desplegada")
        print("4. Probar retroalimentaci√≥n real desde el chat")
        
    except Exception as e:
        print(f"\n‚ùå Error en simulaci√≥n: {str(e)}")
        print("Verificar que la API est√© ejecut√°ndose en http://localhost:8000")

if __name__ == "__main__":
    asyncio.run(main()) 